ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity") +
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp") +
scale_fill_manual(values = c("blue", "red", "green"))
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity") +
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
tmpcolors <- c("red","blue","yellow")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
tmpcolors <- c("red","blue","yellow")
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity") +
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
library(dplyr)
# Use dplyr functions: pipe (%>%), group_by(), summarise(), mutate()
result <- mtcars %>%
group_by(cyl) %>%
mutate(mean_mpg = mean(mpg), max_hp = max(hp)) %>%
summarise(avg_mpg = mean(mean_mpg), max_hp_all = max(max_hp))
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp") +
scale_fill_manual(values = c("blue", "red", "green"))
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
tmpcolors <- c("red","blue","yellow")
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity") +
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
tmpcolors <- c("red", "blue", "yellow")
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +  # Set fill color here
scale_fill_manual(values = tmpcolors) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp") +
scale_fill_manual(values = c("blue", "red", "green"))
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
tmpcolors <- c("red", "blue", "yellow")
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +  # Set fill color here
scale_fill_manual(values = tmpcolors) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
ggplot(mtcars, aes(x = as.factor(Species), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(Species))) +  # Set fill color here
scale_fill_manual(values = tmpcolors) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
ggplot(mtcars, aes(x = as.factor(Species), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(Species))) +  # Set fill color here
scale_fill_manual(values = tmpcolors) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
ggplot(mtcars, aes(Sepal.Length, Sepal.Width)) +
geom_point() +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +  # Set fill color here
scale_fill_manual(values = tmpcolors) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_color_manual(values = c("#a6bddb", "#a6bddb", "#a6bddb")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_color_manual(values = c("#a6bddb", "#a6bddb", "#a6bddb")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Display the result
print(result)
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_color_manual(values = c("#a6bddb", "#a6bddb", "#a6bddb")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Display the first few rows of the dataset
head(mtcars)
# 1. Use the Data that you collect from internet or R already define datasets.
data(mtcars)
# Display the first six rows of the dataset
head(mtcars)
# 2. Data Preparation
# a. Check if there is NA( if not state that using Rcode)
if (any(is.na(mtcars))) {
print("There are NA values in the dataset.")
} else {
print("There are no NA values in the dataset.")
}
# b. Replace or remove NA values
mtcars <- na.omit(mtcars)  # Remove rows with NA values
# Display the modified dataset
head(mtcars)
library(ggplot2)
# 3. Sketch 2 different graph that shows a relation between the columns of the dataset by using the ggplot2 package
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_color_manual(values = c("#a6bddb", "#a6bddb", "#a6bddb")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_color_manual(values = c("#a6bddb", "#a6bbdb", "#a6bddb")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_color_manual(values = c("#a6bddb", , "#a6bddb")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_color_manual(values = c("#a6bddb", "#756bb1", "#a6bddb")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_color_manual(values = c("#e0ecf4", "#756bb1", "#a6bddb")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_fill_manual(values = c("#e0ecf4", "#756bb1", "#a6bddb")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_fill_manual(values = c("#9ebcda", "#756bb1", "#a6bddb")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_fill_manual(values = c("#9ebcda", "#a6bddb", "#756bb1")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_fill_manual(values = c("#a6bddb", "#9ebcda", "#756bb1")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# 3. Sketch 2 different graph that shows a relation between the columns of the dataset by using the ggplot2 package
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
# 3. Sketch 2 different graph that shows a relation between the columns of the dataset by using the ggplot2 package
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
tmpcolors <- c("#31a354")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
scale_fill_manual(values = tmpcolors) +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_fill_manual(values = c("#a6bddb", "#9ebcda", "#756bb1")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# 3. Sketch 2 different graph that shows a relation between the columns of the dataset by using the ggplot2 package
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
tmpcolors <- c("#31a354")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
scale_fill_manual(values = tmpcolors) +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_fill_manual(values = c("#a6bddb", "#9ebcda", "#756bb1")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
# 3. Sketch 2 different graph that shows a relation between the columns of the dataset by using the ggplot2 package
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
tmpcolors <- c("#31a354")
# 3. Sketch 2 different graph that shows a relation between the columns of the dataset by using the ggplot2 package
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
tmpcolors <- c("#31a354")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
scale_colo_manual(values = tmpcolors) +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
# 3. Sketch 2 different graph that shows a relation between the columns of the dataset by using the ggplot2 package
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
tmpcolors <- c("#31a354")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
scale_color_manual(values = tmpcolors) +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
# 3. Sketch 2 different graph that shows a relation between the columns of the dataset by using the ggplot2 package
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
tmpcolors <- c("#31a354")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(aes(color = factor(cyl))) +
scale_color_manual(values = tmpcolors) +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
# 3. Sketch 2 different graph that shows a relation between the columns of the dataset by using the ggplot2 package
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
# Scatter plot with custom point color
tmpcolors <- c("#31a354")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(aes(color = factor(cyl))) +  # Specify color aesthetic here
scale_color_manual(values = tmpcolors) +  # Use custom colors for points
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
# 3. Sketch 2 different graph that shows a relation between the columns of the dataset by using the ggplot2 package
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
# Scatter plot with custom point color
tmpcolors <- c("#e5f5e0", "#a1d99b", "#31a354")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(aes(color = factor(cyl))) +  # Specify color aesthetic here
scale_color_manual(values = tmpcolors) +  # Use custom colors for points
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
# 3. Sketch 2 different graph that shows a relation between the columns of the dataset by using the ggplot2 package
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
# Scatter plot with custom point color
tmpcolors <- c("#99d8c9", "#a1d99b", "#31a354")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(aes(color = factor(cyl))) +  # Specify color aesthetic here
scale_color_manual(values = tmpcolors) +  # Use custom colors for points
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_fill_manual(values = c("#a6bddb", "#9ebcda", "#756bb1")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
ggplot(mtcars, aes(x = mpg, y = hp)) +
# 3. Sketch 2 different graph that shows a relation between the columns of the dataset by using the ggplot2 package
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
# Scatter plot with custom point color
tmpcolors <- c("#99d8c9", "#a1d99b", "#31a354")
ggplot(mtcars, aes(x = mpg, y = hp)) +
# 3. Sketch 2 different graph that shows a relation between the columns of the dataset by using the ggplot2 package
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
# Scatter plot with custom point color
# Scatter plot with a single color for all points
tmpcolor <- "#31a354"
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(color = tmpcolor) +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
# 3. Sketch 2 different graph that shows a relation between the columns of the dataset by using the ggplot2 package
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
# Scatter plot with custom point color
# Scatter plot with a single color for all points
tmpcolors <- c("#31a354")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(color = stmpcolor) +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(color = tmpcolor) +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(color = tmpcolors) +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
# 3. Sketch 2 different graph that shows a relation between the columns of the dataset by using the ggplot2 package
# Graph 1: Scatter plot for mpg (miles per gallon) and hp (horsepower)
# Scatter plot with custom point color
# Scatter plot with a single color for all points
tmpcolor <- c("#31a354")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(color = tmpcolor) +
labs(title = "Scatter Plot: mpg vs hp", x = "mpg", y = "hp")
# Graph 2: Bar plot for cyl (number of cylinders) and disp (displacement)
ggplot(mtcars, aes(x = as.factor(cyl), y = disp)) +
geom_bar(stat = "identity", aes(fill = as.factor(cyl))) +
scale_fill_manual(values = c("#a6bddb", "#9ebcda", "#756bb1")) +  # Use custom colors
labs(title = "Bar Plot: Number of Cylinders vs Displacement", x = "Number of Cylinders", y = "Displacement")
library(ggplot2)
library(NHANES)
library(dplyr)
# Load NHANES dataset
data(NHANES)
# Filter relevant variables and remove missing values
df <- NHANES %>%
select(Gender, BMI, SurveyYr) %>%
filter_all(all_vars(!is.na(.)))
# Create a ggplot as a bar chart
ggplot(df, aes(x = factor(SurveyYr), y = BMI, fill = factor(Gender))) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "BMI Trends for Survey Years 2009 and 2011 by Gender",
x = "Survey Year",
y = "BMI",
fill = "Gender"
) +
theme_minimal()
# Filter relevant variables and remove missing values
df <- NHANES %>%
select(BMI, SurveyYr, DaysMentHlthBad) %>%
filter_all(any_vars(!is.na(.)))
#
ggplot(df, aes(x = factor(SurveyYr), y = DaysMentHlthBad, fill = BMI)) +
geom_tile(width = 0.8, height = 0.8) +  # Adjust width and height for spacing
scale_fill_viridis_c() +
labs(
title = "Mean BMI by Year and DaysMentHlthBad",
x = "Survey Year",
y = "DaysMentHlthBad",
fill = "Mean BMI"
) +
theme_minimal()
library(ggplot2)
# Read data from CSV file
data <- read.csv("lowestDep.csv")
setwd("C:/Users/kutlu/Desktop/365obesity")
# Read data from CSV file
data <- read.csv("lowestDep.csv")
data
# Define custom color palette
custom_colors <- c("#FF6699", "#FFAE99", "#FFFF99", "#A3FF99", "#6BFFD6", "#99FFFF", "#99B3FF", "#9966FF", "#CC66FF", "#27CCFF")
# Plotting
ggplot(data, aes(x = Country, y = DepressionRate, fill = as.factor(Country))) +
geom_bar(stat = "identity", width = 0.5) +
scale_fill_manual(values = custom_colors) +  # Use custom colors
labs(title = "Mental Health Ranking by Country (Depression Rate Lowest 10 countries)",
x = "Country",
y = "Depression Rate (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")  # Remove legend for individual country colors
n <- nrow(data)  # Number of observations
mean_value <- mean(data$DepressionRate, na.rm = TRUE)  # Mean
sd_value <- sd(data$DepressionRate, na.rm = TRUE)  # Standard deviation
median_value <- median(data$DepressionRate, na.rm = TRUE)  # Median
trimmed_mean <- mean(data$DepressionRate, trim = 0.1, na.rm = TRUE)  # Trimmed mean
mad_value <- mad(data$DepressionRate, na.rm = TRUE)  # Mean Absolute Deviation
min_value <- min(data$DepressionRate, na.rm = TRUE)  # Minimum value
max_value <- max(data$DepressionRate, na.rm = TRUE)  # Maximum value
first_quartile <- quantile(data$DepressionRate, 0.25, na.rm = TRUE)  # 1st Quartile
third_quartile <- quantile(data$DepressionRate, 0.75, na.rm = TRUE)  # 3rd Quartile
nas_count <- sum(is.na(data$DepressionRate))  # Count of NAs
# Manual calculation of skewness and kurtosis
skewness_value <- sum((data$DepressionRate - mean_value)^3) / (n * sd_value^3)
kurtosis_value <- sum((data$DepressionRate - mean_value)^4) / (n * sd_value^4) - 3
standard_error <- sd_value / sqrt(n)  # Standard Error
# Print the results
cat("Number of observations (n):", n, "\n")
cat("Mean:", mean_value, "\n")
cat("Standard Deviation:", sd_value, "\n")
cat("Median:", median_value, "\n")
cat("Trimmed Mean:", trimmed_mean, "\n")
cat("Mean Absolute Deviation:", mad_value, "\n")
cat("Minimum value:", min_value, "\n")
cat("Maximum value:", max_value, "\n")
cat("1st Quartile:", first_quartile, "\n")
cat("3rd Quartile:", third_quartile, "\n")
cat("Number of NAs:", nas_count, "\n")
cat("Skewness:", skewness_value, "\n")
cat("Kurtosis:", kurtosis_value, "\n")
cat("Standard Error:", standard_error, "\n")
library(ggplot2)
library(nhanes)
# Install and load necessary packages
install.packages(c("ggplot2", "nhanes", "dplyr"))
install.packages(c("ggplot2", "nhanes", "dplyr"))
install.packages(c("ggplot2", "nhanes", "dplyr"))
library(ggplot2)
library(nhanes)
library(NHANES)
library(dplyr)
# Load NHANES dataset
data("NHANES")
# Subset data for specific variables and remove missing values
df <- NHANES %>%
select(Gender, BMI, SurveyYr) %>%
filter_all(all_vars(!is.na(.)))
# Define custom color palette
custom_colors <- c("#FF6699", "#FFAE99", "#FFFF99", "#A3FF99", "#6BFFD6", "#99FFFF", "#99B3FF", "#9966FF", "#CC66FF", "#27CCFF")
# Plotting
ggplot(df, aes(x = as.factor(SurveyYr), y = BMI, fill = Gender)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = custom_colors) +  # Use custom colors
labs(title = "BMI Trends by Survey Year and Gender",
x = "Survey Year",
y = "BMI",
fill = "Gender") +
theme_minimal()
# Descriptive statistics for Gender, BMI, and SurveyYr
summary_stats_gender <- summary(df$Gender)
summary_stats_bmi <- summary(df$BMI)
summary_stats_surveyyr <- summary(df$SurveyYr)
cat("Descriptive Statistics for Gender:\n")
print(summary_stats_gender)
cat("\nDescriptive Statistics for BMI:\n")
print(summary_stats_bmi)
cat("\nDescriptive Statistics for Survey Year:\n")
print(summary_stats_surveyyr)
# Define custom color palette
custom_colors <- c("#FF6699", "#99B3FF", "#FFFF99", "#A3FF99", "#6BFFD6", "#99FFFF", "#99B3FF", "#9966FF", "#CC66FF", "#27CCFF")
# Plotting
ggplot(df, aes(x = as.factor(SurveyYr), y = BMI, fill = Gender)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = custom_colors) +  # Use custom colors
labs(title = "BMI Trends by Survey Year and Gender",
x = "Survey Year",
y = "BMI",
fill = "Gender") +
theme_minimal()
print(summary_stats_gender)
print(summary_stats_bmi)
print(summary_stats_surveyyr)
n <- nrow(data)  # Number of observations
mean_value <- mean(data$DepressionRate, na.rm = TRUE)  # Mean
sd_value <- sd(data$DepressionRate, na.rm = TRUE)  # Standard deviation
median_value <- median(data$DepressionRate, na.rm = TRUE)  # Median
trimmed_mean <- mean(data$DepressionRate, trim = 0.1, na.rm = TRUE)  # Trimmed mean
mad_value <- mad(data$DepressionRate, na.rm = TRUE)  # Mean Absolute Deviation
min_value <- min(data$DepressionRate, na.rm = TRUE)  # Minimum value
max_value <- max(data$DepressionRate, na.rm = TRUE)  # Maximum value
first_quartile <- quantile(data$DepressionRate, 0.25, na.rm = TRUE)  # 1st Quartile
third_quartile <- quantile(data$DepressionRate, 0.75, na.rm = TRUE)  # 3rd Quartile
nas_count <- sum(is.na(data$DepressionRate))  # Count of NAs
# Manual calculation of skewness and kurtosis
skewness_value <- sum((data$DepressionRate - mean_value)^3) / (n * sd_value^3)
kurtosis_value <- sum((data$DepressionRate - mean_value)^4) / (n * sd_value^4) - 3
standard_error <- sd_value / sqrt(n)  # Standard Error
# Print the results
cat("Number of observations (n):", n, "\n")
cat("Mean:", mean_value, "\n")
cat("Standard Deviation:", sd_value, "\n")
cat("Median:", median_value, "\n")
cat("Trimmed Mean:", trimmed_mean, "\n")
cat("Mean Absolute Deviation:", mad_value, "\n")
cat("Minimum value:", min_value, "\n")
cat("Maximum value:", max_value, "\n")
cat("1st Quartile:", first_quartile, "\n")
cat("3rd Quartile:", third_quartile, "\n")
cat("Number of NAs:", nas_count, "\n")
cat("Skewness:", skewness_value, "\n")
cat("Kurtosis:", kurtosis_value, "\n")
cat("Standard Error:", standard_error, "\n")
mean_value <- mean(data$BMI, na.rm = TRUE)  # Mean
# Number of observations
n <- nrow(df)
# Mean
mean_value <- mean(df$BMI, na.rm = TRUE)
# Standard deviation
sd_value <- sd(df$BMI, na.rm = TRUE)
# Median
median_value <- median(df$BMI, na.rm = TRUE)
# Trimmed mean
trimmed_mean <- mean(df$BMI, trim = 0.1, na.rm = TRUE)
# Mean Absolute Deviation
mad_value <- mad(df$BMI, na.rm = TRUE)
# Minimum value
min_value <- min(df$BMI, na.rm = TRUE)
# Maximum value
max_value <- max(df$BMI, na.rm = TRUE)
# 1st Quartile
first_quartile <- quantile(df$BMI, 0.25, na.rm = TRUE)
# 3rd Quartile
third_quartile <- quantile(df$BMI, 0.75, na.rm = TRUE)
# Count of NAs
nas_count <- sum(is.na(df$BMI))
# Manual calculation of skewness and kurtosis
skewness_value <- sum((df$BMI - mean_value)^3) / (n * sd_value^3)
kurtosis_value <- sum((df$BMI - mean_value)^4) / (n * sd_value^4) - 3
# Standard Error
standard_error <- sd_value / sqrt(n)
# Print the results
cat("Number of observations (n):", n, "\n")
cat("Mean:", mean_value, "\n")
cat("Standard Deviation:", sd_value, "\n")
cat("Median:", median_value, "\n")
cat("Trimmed Mean:", trimmed_mean, "\n")
cat("Mean Absolute Deviation:", mad_value, "\n")
cat("Minimum value:", min_value, "\n")
cat("Maximum value:", max_value, "\n")
cat("1st Quartile:", first_quartile, "\n")
cat("3rd Quartile:", third_quartile, "\n")
cat("Number of NAs:", nas_count, "\n")
cat("Skewness:", skewness_value, "\n")
cat("Kurtosis:", kurtosis_value, "\n")
cat("Standard Error:", standard_error, "\n")
# Create a ggplot as a bar chart
ggplot(df, aes(x = factor(SurveyYr), y = BMI, fill = factor(Gender))) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "BMI Trends for Survey Years 2009 and 2011 by Gender",
x = "Survey Year",
y = "BMI",
fill = "Gender"
) +
theme_minimal()
#
ggplot(df, aes(x = factor(SurveyYr), y = DaysMentHlthBad, fill = BMI)) +
geom_tile(width = 0.8, height = 0.8) +  # Adjust width and height for spacing
scale_fill_viridis_c() +
labs(
title = "Mean BMI by Year and DaysMentHlthBad",
x = "Survey Year",
y = "DaysMentHlthBad",
fill = "Mean BMI"
) +
theme_minimal()
